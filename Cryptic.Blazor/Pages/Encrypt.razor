@page "/encrypt"
@inject ICryptoService _cryptoService
@inject IToastService _toastService
@inject EncryptionFormValidator _validator
@using System
@using System.Text
@using System.ComponentModel.DataAnnotations
@using Cryptic.Blazor.Model
@using Cryptic.Blazor.Model.Validation
@using Cryptic.Blazor.Services
@using FluentValidation

<ArModal @ref="Modal" />
<EditForm OnValidSubmit="HandleSubmit" EditContext="_editContext">
    <DataAnnotationsValidator />

    <div class="mb-3" style="width:100%">
        <ArInput @bind-Value="@_encryptForm.Plaintext" Icon="unlock-dark" Label="Plaintext" Placeholder="Plaintext">
            <ChildContent>
                <ValidationMessage class="validation-floating" For=@(() => _encryptForm.Plaintext)></ValidationMessage>
            </ChildContent>
            <IconComponent>
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-unlock"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 9.9-1"></path></svg>
            </IconComponent>
        </ArInput>
    </div>


    <div class="mb-3" style="width:100%">
        <ArPassword @bind-Value="@_encryptForm.Password" Label="Password" Placeholder="Password">
            <ValidationMessage class="validation-floating" For=@(() => _encryptForm.Password)></ValidationMessage>
        </ArPassword>
    </div>


    <div class="accordion mb-3" id="accordionFlushExample">
        <div class="accordion-item">
            <h2 class="accordion-header">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                    Advanced Settings
                </button>
            </h2>
            <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body">
                    <ArRange Title="Memory Limit" @bind-SelectValue="@_encryptForm.MemoryLimits" />
                    <ArRange Title="Operations Limit" @bind-SelectValue="@_encryptForm.OperationsLimits" />
                </div>
            </div>
        </div>
    </div>


    <div class="mb-3">

        @if (isLoading)
        {

            <button class="btn btn-primary w-100" disabled>
                <span class="spinner-border spinner-border-sm"></span>
                <span>Encrypting...</span>
            </button>

        }
        else
        {
            <button type="submit" class="btn btn-outline-primary w-100">Encrypt</button>
        }


        <button type="reset" class="btn btn-outline-danger w-100 mt-2" @onclick="ResetForm">Reset</button>
    </div>

</EditForm>

@code {
    private ArModal Modal { get; set; } = null!;
    private bool isLoading = false;
    private EncryptionForm _encryptForm = new();
    private ValidationContext _validationContext = null!;
    private ValidationMessageStore _validationMessageStore = null!;

    private EditContext _editContext = null!;

    protected override void OnInitialized()
    {
        InitializeEditContext();
    }

    private void InitializeEditContext()
    {
        _editContext = new EditContext(_encryptForm);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        _editContext.OnValidationRequested += async (sender, args) => await ValidateModel();
    }

    private async Task ValidateModel()
    {
        var validationResult = await _validator.ValidateAsync(_encryptForm);
        _validationMessageStore.Clear();

        for (int i = 0; i < validationResult.Errors.Count; i++)
        {
            _validationMessageStore.Add(_editContext.Field(validationResult.Errors[i].PropertyName), validationResult.Errors[i].ErrorMessage);
        }
        var xx = _editContext.GetValidationMessages().ToList();
        _editContext.NotifyValidationStateChanged();
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            await Task.Delay(1);
            var ciphertextBytes = await _cryptoService.Encrypt(_encryptForm.Plaintext, _encryptForm.Password, _encryptForm.MemoryLimits, null, _encryptForm.OperationsLimits, null, null);
            var cipherText = Convert.ToBase64String(ciphertextBytes);
            _encryptForm.Ciphertext = cipherText;
            await Modal.Open(new ModalContent("Ciphertext", _encryptForm.Ciphertext, "Make sure to copy this ciphertext. Once closed, this ciphertext cannot be retrieved again")
                {
                    Icon = "lock-dark",
                    InfotextStyle = InfotextType.WARN
                });
            isLoading = false;
        }
        catch (Exception ex)
        {
            isLoading = false;
            Console.WriteLine(ex);
            await Modal.Open(new ModalContent("Error", ex.Message, "Unable to encrypt input"){ InfotextStyle = InfotextType.ERROR, DisableCopy = true });
        }
    }

    private void ResetForm()
    {
        _encryptForm = new EncryptionForm();
        InitializeEditContext();
        _validationMessageStore.Clear();
        _editContext.NotifyValidationStateChanged();
    }
}
