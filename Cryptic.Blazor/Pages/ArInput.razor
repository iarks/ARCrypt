@inherits Microsoft.AspNetCore.Components.Forms.InputText

@inject IJSRuntime _jsRuntime

<div style="width:100%">
    <div class="card">
        <div class="card-body">
            <div class="form-floating flex-grow-1">
                <textarea @attributes="@AdditionalAttributes" style="height:100px; min-height:100px" class="form-control" placeholder="Plaintext" id="input" @bind="@CurrentValueAsString" />
                <label for="input">@Label</label>
                @ChildContent
            </div>
        </div>
        <div class="card-footer border-0">

            <div class="d-flex">
                <button class="p-2 btn border-0" style="color:ButtonText" disabled>
                    @IconComponent
                </button>

                <div class="ms-auto p-2">

                <div class="d-flex">
                <button class=@("btn btn-outline-secondary p-2"+ (!DisableClear ? " me-3" : null)) type="button" @onclick="CopyAsync">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-copy"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
                </button>
                <button class="btn btn-outline-danger p-2" type="button" @onclick="Clear">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>

                </button>
                </div>
                </div>
            </div>
        </div>
    </div>
</div>





@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? IconComponent { get; set; }

    [Parameter] public bool DisableClear { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? Icon { get; set; }

    private void Clear()
    {
        CurrentValueAsString = "";
    }

    private async Task CopyAsync()
    {
        await _jsRuntime.InvokeVoidAsync("copyToClipboard", CurrentValueAsString);
    }
}