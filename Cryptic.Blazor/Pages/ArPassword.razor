@inherits Microsoft.AspNetCore.Components.Forms.InputText

@inject IJSRuntime _jsRuntime

<div style="width:100%">

    <div class="card">
        <div class="card-body">

            <div class="input-group">
                <div class="form-floating flex-grow-1">
                    <input type=@(_showPassword ? "input" : "password") @attributes="@AdditionalAttributes" class="form-control" placeholder="@Placeholder" id="password" @bind="@CurrentValueAsString"></input>
                    <label for="password">@Label</label>

                </div>

                <button class="btn btn-outline-secondary border-start-0" style="border: var(--bs-border-width) solid var(--bs-border-color);" type="button" @onclick="TogglePassword">

                    @if (_showPassword)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-eye-off"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"></path><line x1="1" y1="1" x2="23" y2="23"></line></svg>
                    }

                </button>
            </div>
            @ChildContent


        </div>
        <div class="card-footer border-0">

            <div class="d-flex">
                <button class="p-2 btn border-0" style="color:ButtonText" disabled>
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-key"><path d="M21 2l-2 2m-7.61 7.61a5.5 5.5 0 1 1-7.778 7.778 5.5 5.5 0 0 1 7.777-7.777zm0 0L15.5 7.5m0 0l3 3L22 7l-3-3m-3.5 3.5L19 4"></path></svg>
                </button>

                <div class="ms-auto p-2">



                @if (!DisableGenerate)
                {
                    <button class="btn btn-outline-secondary p-2 me-3" type="button" @onclick="Generate">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-refresh-ccw"><polyline points="1 4 1 10 7 10"></polyline><polyline points="23 20 23 14 17 14"></polyline><path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"></path></svg>
                        </button>
                }

                <button class="btn btn-outline-secondary p-2 me-3" type="button" @onclick="CopyAsync">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-copy"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>
                    </button>
                <button class="btn btn-outline-danger p-2" type="button" @onclick="Clear">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>
                    </button>

                </div>
            </div>



        </div>

    </div>

</div>


@code {

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public bool DisableGenerate { get; set; }
    [Parameter] public string? Icon { get; set; }

    private bool _showPassword = false;

    private void Clear()
    {
        CurrentValueAsString = "";
    }

    private void TogglePassword()
    {
        _showPassword = !_showPassword;
    }

    private async Task CopyAsync()
    {
        await _jsRuntime.InvokeVoidAsync("copyToClipboard", CurrentValueAsString);
    }

    private async Task Generate()
    {
        var x = await _jsRuntime.InvokeAsync<byte[]>("_sodium.randombytes_buf", 20);
        CurrentValue = Convert.ToBase64String(x, Base64FormattingOptions.None).TrimEnd('=');
    }
}